.page-header {
  background: {
    color: DarkSlateBlue;
    image: linear-gradient(120deg, SlateBlue, DarkSlateBlue);
  }
}

.page-top-bar {
  height: 12px;
  width: 100%;
  border-top: Lavender 1px solid;
  background-image: linear-gradient(to right, $colors);
}

.project-stars {
  margin-top: 24px;
}

.main-content {
  h1, h2, h3, h4, h5, h6 {
    color: DarkMagenta;
    font-weight: bold;
  }

  p {
    color: Indigo;
  }

  pre {
    background-color: Lavender;
    border-color: Thistle;

    > code {
      color: RebeccaPurple;
    }
  }
}

h1, h2, h3, .main-content p, .btn, .site-footer, ul.table-of-content li {
  font-family: 'Wendy One', sans-serif;
}

body {
  color: MediumSlateBlue;
}

a {
  color: DarkViolet;

  &:hover {
    text-decoration: none;
    color: Purple;
  }
}

.site-footer-credits {
  color: MediumPurple;
}

.site-footer {
  border-color: Lavender;
}

$prefixes: ("-moz-", "");

@mixin selection($color, $background-color) {
  @each $prefix in $prefixes {
    ::#{$prefix}selection {
      color: $color;
      background-color: $background-color;
    }
  }
}

@include selection(white, rgba(black, .8));

ul.table-of-content {
  margin: 0;
  list-style: none;
  padding: 0;

  li {
    text-align: center;
    font-size: 26px;
    padding: 40px;
    margin-bottom: 15px;
    border-radius: .3rem;
    cursor: pointer;
    transition: .3s;

    @include mq($from: mobile, $until: tablet) {
      font-size: 19px;
    }

    &:hover {
      transform: scale(1.02);
      box-shadow: 0 0 60px 0 rgba(black, .1);
    }

    p {
      margin: 0;

      &:before, &:after {
        opacity: .8;
      }

      &.hex {
        text-transform: uppercase;

        &:before {
          content: '#';
        }
      }

      &.rgb {
        &:before {
          content: 'rgb(';
        }

        &:after {
          content: ')';
        }
      }
    }

    @for $i from 1 through length($colors) {

      $my-color: nth($colors, $i);
      $my-color-invert: invert(nth($colors, $i));
      $my-color-trans: rgba(nth($colors, $i), .8);
      $my-color-darken: darken(nth($colors, $i), 10%);

      &:nth-child(#{length($colors)}n+#{$i}) {
        background-color: $my-color;

        p {
          color: $my-color;
        }

        a.name {
          color: $my-color;
          text-shadow: (-1px) -1px 0 $my-color, 1px -1px 0 $my-color, -1px 1px 0 $my-color, 1px 1px 0 $my-color;
        }

        &:hover {
          background-color: $my-color-invert; // More options => color: $my-color-darken; or background-color: $my-color-trans;

          a.name {
            text-shadow: (-1px) -1px 0 $my-color-invert, 1px -1px 0 $my-color-invert, -1px 1px 0 $my-color-invert, 1px 1px 0 $my-color-invert;

            @include underline($my-color-trans);

            @media (-webkit-min-device-pixel-ratio: 1.5), (min-resolution: 144dpi) {
              @include underline($my-color-trans, .5);
            }
          }
        }
      }
    }

    &.gray {
      &:hover {
        background-color: white;

        a.name {
          text-shadow: (-1px) -1px 0 white, 1px -1px 0 white, -1px 1px 0 white, 1px 1px 0 white;
        }
      }
    }
  }
}
